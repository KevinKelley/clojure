<project name="clojure" default="all" xmlns:mvn="urn:maven-artifact-ant">

  <description>
    Build with "ant jar" and then start the
    REPL with: "java -cp clojure.jar clojure.main".
    You will need to install the Maven Ant
    Tasks to ${ant.home}/lib in order to execute
    the nightly-build or stable-build targets.
  </description>

  <property name="src" location="src"/>
  <property name="jsrc" location="${src}/jvm"/>
  <property name="jbuild" location="jclasses"/>
  <property name="cljsrc" location="${src}/clj"/>
  <property name="build" location="classes"/>
  <property name="reader.build" location="reader/"/>

  <!-- Java -->
  <target name="compile-java" depends="jbuild"
          description="Compile Java sources.">
    <javac srcdir="${jsrc}" destdir="${jbuild}" includeJavaRuntime="yes"
           debug="true" target="1.5"/>
  </target>

  <target name="jbuild">
    <mkdir dir="${jbuild}"/>
  </target>

  <target name="clean-java">
    <delete dir="${jbuild}"/>
  </target>
  <!-- /Java -->

  <!-- Clojure -->
  <target name="compile-clojure">
    <antcall target="compile-reader" />
    <antcall target="clean-clojure" />
    <antcall target="compile-clojure1" />
  </target>
  <target name="compile-clojure1" depends="compile-java,build"
          description="Compile Clojure sources.">
    <java classname="clojure.lang.Compile"
      classpath="${build}:${cljsrc}:${jbuild}:${reader.build}"
      failonerror="true"
      fork="true">
      <sysproperty key="clojure.compile.path" value="${build}"/>
      <arg value="clojure.core"/>
      <arg value="clojure.main"/>
      <arg value="clojure.set"/>
      <arg value="clojure.xml"/>
      <arg value="clojure.zip"/>
      <arg value="clojure.inspector"/>
      <arg value="clojure.walk"/>
      <arg value="clojure.stacktrace"/>
      <arg value="clojure.template"/>
      <arg value="clojure.test"/>
      <arg value="clojure.test.tap"/>
    </java>
  </target>

  <target name="build">
    <mkdir dir="${build}" />
  </target>

  <target name="clean-clojure">
    <delete dir="${build}" />
  </target>
  <!-- /Clojure -->

  <!-- Reader -->
 <target name="compile-reader" depends="compile-clojure1,reader.build"
          description="Compile Clojure sources.">
    <java classname="clojure.lang.Compile"
      classpath="${build}:${cljsrc}:${jbuild}:${reader.build}"
      failonerror="true"
      fork="true">
      <sysproperty key="clojure.compile.path" value="${reader.build}"/>
      <arg value="clojure.reader"/>
    </java>
  </target>

  <target name="reader.build">
    <mkdir dir="${reader.build}" />
  </target>

  <target name="clean-reader">
    <delete dir="${reader.build}" />
  </target>
  <!-- /Reader -->

  <!--- Jars -->
  <target name="clojure" depends="compile-clojure,pom.xml"
          description="Create clojure jar file.">
    <jar jarfile="${clojure_jar}" basedir="${build}">
      <fileset dir="${cljsrc}">
        <include name="**/*.clj"/>
        <include name="clojure/version.properties"/>
      </fileset>
      <fileset dir="${jbuild}">
        <include name="**/*"/>
      </fileset>
       <fileset dir="${reader.build}">
        <include name="**/*"/>
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="clojure.main"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
    </jar>
    <copy file="${clojure_jar}" tofile="${clojure_noversion_jar}" />
  </target>

  <target name="clojure-slim" depends="compile-java,pom.xml"
          description="Create clojure-slim jar file (omits compiled Clojure code)">
          <jar jarfile="${slim_jar}" basedir="${jbuild}">
      <fileset dir="${cljsrc}">
        <include name="**/*.clj"/>
        <include name="clojure/version.properties"/>
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="clojure.main"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
    </jar>
    <copy file="${slim_jar}" tofile="${slim_noversion_jar}" />
  </target>

  <target name="clojure-sources" depends="pom.xml"
          description="Create a JAR of Java sources.">
    <jar jarfile="${src_jar}" basedir="${jsrc}" includes="**/*">
      <fileset dir="${cljsrc}"
               includes="clojure/version.properties"/>
    </jar>
    <copy file="${src_jar}" tofile="${src_noversion_jar}" />
  </target>

  <target name="jar" depends="clojure"/>

  <target name="all" depends="clojure,clojure-slim,clojure-sources"/>

 
  <!--- /Jars -->

  <target name="clean" depends="clean-java,clean-clojure">
    <delete file="pom.xml"/>
  </target>

  <!-- Junk I don't care about -->
  <!-- version related properties -->
  <property file="${cljsrc}/clojure/version.properties"/>
  <!-- ensures all version properties are present -->
  <fail unless="clojure.version.major"/>
  <fail unless="clojure.version.minor"/>
  <fail unless="clojure.version.interim"/>

  <condition property="clojure.version.incremental.label"
             value=".${clojure.version.incremental}"
             else="">
  	<length string="${clojure.version.incremental}" when="greater" length="0" />
  </condition>
  <condition property="clojure.version.qualifier.label"
             value="-${clojure.version.qualifier}"
             else="">
  	<length string="${clojure.version.qualifier}" when="greater" length="0" />
  </condition>
  <condition property="clojure.version.interim.label"
             value="-SNAPSHOT"
	         else="">
    <!-- We place -SNAPSHOT whenever interim is not set to false, not only
         if interim is set to true (this is less typo prone in the worst case -->
  	<not><equals arg1="${clojure.version.interim}" arg2="false" trim="true"/></not>
  </condition>
	
  <property name="clojure.version.label" 
    value="${clojure.version.major}.${clojure.version.minor}${clojure.version.incremental.label}${clojure.version.qualifier.label}${clojure.version.interim.label}"/>
	
  <!-- general filterset for use when clojure version must be copied -->
  <filterset id="clojure-version-filterset">
    <filter token="clojure-version" value="${clojure.version.label}"/>
  </filterset>
	
  <property name="clojure_noversion_jar" location="clojure.jar"/>
  <property name="slim_noversion_jar" location="clojure-slim.jar"/>
  <property name="src_noversion_jar" location="clojure-sources.jar"/>
  <property name="clojure_jar" location="clojure-${clojure.version.label}.jar"/>
  <property name="slim_jar" location="clojure-slim-${clojure.version.label}.jar"/>
  <property name="src_jar" location="clojure-sources-${clojure.version.label}.jar"/>


  <!-- These make sense for building on tapestry.formos.com -->

  <property name="snapshot.repo.dir" location="/var/www/maven-snapshot-repository"/>
  <property name="stable.repo.dir" location="/var/www/maven-repository"/>


  <target name="pom.xml">
    <copy file="pom-template.xml" 
          tofile="pom.xml">
    	<filterset refid="clojure-version-filterset"/>
    </copy>
  	<!--prevents users from modifying accidentally the generated pom.xml
  	    works only on linux.-->
  	<chmod file="pom.xml" perm="ugo-w"/>
  </target>


 
</project>
